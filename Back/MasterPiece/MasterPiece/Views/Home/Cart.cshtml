@model IEnumerable<MasterPiece.Models.Product>

@{
    ViewBag.Title = "Cart";
    Layout = "~/Views/Shared/MainLayout.cshtml";
}

<div class="breadcrumb-section breadcrumb-bg" style="background-image: url(../../assets/img/CartBG.png);">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 offset-lg-2 text-center">
                <div class="breadcrumb-text">
                    <h1>Cart</h1>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- end breadcrumb section -->
<!-- cart -->
<div class="cart-section mt-150 mb-150">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-md-12">
                <div class="cart-table-wrap">
                    <table class="cart-table">
                        <thead class="cart-table-head">
                            <tr class="table-head-row">
                                <th class="product-remove"></th>
                                <th class="product-image">Product Image</th>
                                <th class="product-name">Name</th>
                                <th class="product-price">Price</th>
                                <th class="product-quantity">Quantity</th>
                                <th class="product-total">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{double totalprice = 0; }

                                @foreach (var item in Model)
                                {


                                    <tr class="table-body-row">
                                        <td class="product-remove"><a href="RemoveItem/@item.Product_id"><i class="far fa-window-close"></i></a></td>
                                        <td class="product-image"><img src="../../ProductImage/@item.Product_Image" style="height: 60px; width: 60px;" alt=""></td>
                                        <td class="product-name">@item.Product_Name</td>
                                        <td class="product-price">@item.Product_Price JD</td>
                                        <td class="product-quantity"><input type="number" value="@item.QuantityInCart" placeholder="@item.QuantityInCart"></td>
                                        <td class="product-total">1</td>
                                    </tr>
                                    totalprice = totalprice + Convert.ToDouble(item.Product_Price);
                                }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="total-section">
                    <table class="total-table">
                        <thead class="total-table-head">
                            <tr class="table-total-row">
                                <th>Total</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody>
                           
                                @{double finalprice = totalprice; }
                                <tr class="total-data">
                                    <td><strong>Subtotal: </strong></td>
                                    <td>@totalprice JD</td>
                                </tr>
                                    @if (totalprice >= 100)
                                    {


                                        <tr class="total-data">
                                            <td><strong>Shipping: </strong></td>
                                            <td>0</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        finalprice = totalprice + 15;
                                        <tr class="total-data">
                                            <td><strong>Shipping: </strong></td>
                                            <td>15JD</td>
                                        </tr>
                                    }
                                
                                <tr class="total-data">
                                    <td><strong>Total: </strong></td>
                                    <td>@finalprice JD</td>
                                </tr>
                                
                            </tbody>
                    </table>
                    @if (Model.Count() > 0) { 
                    <div class="cart-buttons">
                        <a href="@Url.Action("CheckOut","Home","")" class="boxed-btn black" style="float:right">Check Out</a>
                    </div>}
                </div>

               
            </div>
        </div>
    </div>
</div>
<script>
function increaseQuantity(productId) {
    // get the current cart cookie value
    var cartCookie = getCookie("cart");

    // split the cookie value into an array of "productId:quantity" pairs
    var cartItems = cartCookie ? cartCookie.split(",") : [];

    // find the item in the cart with the matching product ID
    var found = false;
    for (var i = 0; i < cartItems.length; i++) {
        var parts = cartItems[i].split(":");
        if (parts[0] == productId) {
            found = true;
            parts[1]++;
            cartItems[i] = parts.join(":");
            break;
        }
    }

    // if the item wasn't found, add it to the cart with a quantity of 1
    if (!found) {
        cartItems.push(productId + ":1");
    }

    // set the new cookie value and refresh the page
    setCookie("cart", cartItems.join(","), 7);
    location.reload();
}

function decreaseQuantity(productId) {
    // get the current cart cookie value
    var cartCookie = getCookie("cart");

    // split the cookie value into an array of "productId:quantity" pairs
    var cartItems = cartCookie ? cartCookie.split(",") : [];

    // find the item in the cart with the matching product ID
    var found = false;
    for (var i = 0; i < cartItems.length; i++) {
        var parts = cartItems[i].split(":");
        if (parts[0] == productId) {
            found = true;
            if (parts[1] > 1) {
                parts[1]--;
                cartItems[i] = parts.join(":");
            } else {
                cartItems.splice(i, 1);
            }
            break;
        }
    }

    // set the new cookie value and refresh the page
    setCookie("cart", cartItems.join(","), 7);
    location.reload();
}

// helper function to get a cookie value by name
function getCookie(name) {
    var match = document.cookie.match(new RegExp("(^| )" + name + "=([^;]+)"));
    if (match) {
        return match[2];
    }
}

// helper function to set a cookie value
function setCookie(name, value, days) {
    var expires = "";
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + value + expires + "; path=/";
}
</script>
